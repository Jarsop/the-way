{"index":1,"description":"Hello world","language":"kotlin","code":"fun main(args: Array<String>) {\n    println(\"Hello World!\")\n}","extension":".kt","tags":["test"],"date":"2022-01-07T22:29:51.070355Z","updated":"2022-01-07T22:29:51.070355Z"}
{"index":2,"description":"Append to an existing key in sled","language":"rust","code":"pub const SEMICOLON: u8 = 59;\n\n/// If key exists, add value to existing values - join with a semicolon\n/// use as db.set_merge_operator(merge_index)\nfn merge_index(_key: &[u8], old_indices: Option<&[u8]>, new_index: &[u8]) -> Option<Vec<u8>> {\n    let mut ret = old_indices.map_or_else(Vec::new, |old| old.to_vec());\n    if !ret.is_empty() {\n        ret.extend_from_slice(&[SEMICOLON]);\n    }\n    ret.extend_from_slice(new_index);\n    Some(ret)\n}","extension":".rs","tags":["sled"],"date":"2022-01-07T22:29:51.070365Z","updated":"2022-01-07T22:29:51.070365Z"}
{"index":3,"description":"Take user input from external editor","language":"rust","code":"use dialoguer::Editor;\n\n/// Gets input from external editor, optionally displays default text in editor\npub fn external_editor_input(default: Option<&str>, extension: &str) -> Option<String> {\n    Editor::new()\n        .extension(extension)\n        .edit(default.unwrap_or(\"\"))\n}","extension":".rs","tags":["dialoguer"],"date":"2022-01-07T22:29:51.070367Z","updated":"2022-01-07T22:29:51.070367Z"}
{"index":4,"description":"Terminal code highlight","language":"rust","code":"use syntect::easy::HighlightLines;\nuse syntect::highlighting::{Color, FontStyle, Style, StyleModifier, ThemeSet};\nuse syntect::parsing::SyntaxSet;\nuse syntect::util::{as_24_bit_terminal_escaped, LinesWithEndings};\nuse std::path::PathBuf;\n\nstruct CodeHighlight {\n    syntax_set: SyntaxSet,\n    theme_set: ThemeSet,\n    theme_name: String,\n    theme_dir: PathBuf\n}\nimpl CodeHighlight {\n    /// Loads themes from `theme_dir` and default syntax set.\n    /// Sets highlighting styles\n    fn new(theme: &str, theme_dir: PathBuf) -> color_eyre::Result<Self> {\n        let mut theme_set = ThemeSet::load_defaults();\n        theme_set\n            .add_from_folder(&theme_dir)\n            .map_err(|_| LostTheWay::ThemeError {\n                theme: String::from((&theme_dir).to_str().unwrap()),\n            })?;\n        let mut highlighter = Self {\n            syntax_set: SyntaxSet::load_defaults_newlines(),\n            theme_name: theme.into(),\n            theme_set,\n            theme_dir,\n        };\n        Ok(highlighter)\n    }\n    \n    fn highlight_code(&self, code: &str, extension: &str) -> color_eyre::Result<Vec<String>> {\n        let mut colorized = Vec::new();\n        let extension = extension.split('.').nth(1).unwrap_or(\".txt\");\n        let syntax = self.syntax_set.find_syntax_by_extension(extension).ok_or(\n            LostTheWay::LanguageNotFound {\n                language: extension.into(),\n            },\n        )?;\n        let mut h = HighlightLines::new(syntax, &self.theme_set.themes[&self.theme_name]);\n        for line in LinesWithEndings::from(code) {\n            let ranges: Vec<(Style, &str)> = h.highlight(line, &self.syntax_set);\n            let escaped = as_24_bit_terminal_escaped(&ranges[..], false);\n            colorized.push(escaped);\n        }\n        Ok(colorized)\n    }\n}","extension":".rs","tags":["syntect"],"date":"2022-01-07T22:29:51.070369Z","updated":"2022-01-07T22:29:51.070369Z"}
{"index":5,"description":"Take user input from the terminal","language":"rust","code":"use dialoguer::{theme, Input};\n/// Takes user input from terminal, optionally has a default and optionally displays it.\npub fn user_input(\n    message: &str,\n    default: Option<&str>,\n    show_default: bool,\n) -> color_eyre::Result<String> {\n    match default {\n        Some(default) => Ok(Input::with_theme(&theme::ColorfulTheme::default())\n            .with_prompt(message)\n            .default(default.to_owned())\n            .show_default(show_default)\n            .interact()?\n            .trim()\n            .to_owned()),\n        None => Ok(\n            Input::<String>::with_theme(&theme::ColorfulTheme::default())\n                .with_prompt(message)\n                .interact()?\n                .trim()\n                .to_owned(),\n        ),\n    }\n}","extension":".rs","tags":["dialoguer"],"date":"2022-01-07T22:29:51.070373Z","updated":"2022-01-07T22:29:51.070373Z"}
{"index":6,"description":"Add a new language syntax to the-way","language":"shell","code":"wget <url=https://raw.githubusercontent.com/getzola/zola/master/sublime/syntaxes/><lang>.sublime-syntax && the-way themes language <lang>.sublime-syntax && rm <lang>.sublime-syntax","extension":".sh","tags":["usage","variable"],"date":"2022-01-07T22:29:51.070376Z","updated":"2022-01-07T22:29:51.070376Z"}
{"index":7,"description":"Parse dates from English date expressions","language":"rust","code":"use chrono::{Date, Utc};\nuse chrono_english::{parse_date_string, Dialect};\n\n/// Makes a date from a string, can be colloquial like \"next Friday\"\npub fn parse_date(date_string: &str) -> color_eyre::Result<Date<Utc>> {\n    if date_string.to_ascii_lowercase() == \"today\" {\n        Ok(Utc::now().date())\n    } else {\n        Ok(parse_date_string(date_string, Utc::now(), Dialect::Uk)?.date())\n    }\n}","extension":".rs","tags":["chrono"],"date":"2022-01-07T22:29:51.070378Z","updated":"2022-01-07T22:29:51.070379Z"}
{"index":8,"description":"Copy some text to clipboard","language":"rust","code":"use clipboard::{ClipboardContext, ClipboardProvider};\n\n/// Set clipboard contents to text\npub fn copy_to_clipboard(text: String) -> color_eyre::Result<()> {\n    let mut ctx: ClipboardContext =\n        ClipboardProvider::new()?;\n    ctx.set_contents(text)?;\n    Ok(())\n}","extension":".rs","tags":["clipboard"],"date":"2022-01-07T22:29:51.070381Z","updated":"2022-01-07T22:29:51.070381Z"}
